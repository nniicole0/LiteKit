{ Project: CommControl.spin Platform: Parallax Project USB Board Revision: 1.2 Author: Nicole Ooi Date: 29 November 2021 Log:Date: Desc}CON      '  _clkmode = xtal1 + pll16x                                               'Standard clock mode * crystal frequency = 80 MHz      '  _xinfreq = 5_000_000      '  _ConClkFreq = ((_clkmode - xtal1) >> 6) * _xinfreq        '_Ms_001     = _ConClkFreq / 1_000        commRxPin   = 20        commTxPin   = 21        commBaud    = 9600        commStart   = $7A        commForward = $01        commReverse = $02        commLeft    = $03        commRight   = $04        commStopAll = $AAVAR  'Global variable  long  ComcogID, commStack[128]  long  _Ms_001OBJ  Comm    : "FullDuplexSerial.spin"    'UART communication for Cotrol  'Term    : "FullDuplexSerial.spin"  ' Create a hardware definition filePUB CaptureData(decisionMode)  |  rxValue  'Declaration & Initilisation  Comm.Start(commTxPin, commRxPin, 0,commBaud)  Pause(500)  'Wait 0.5 seconds  'Run & get readings  repeat    'rxValue := Comm.Rx        '<--Wait at this statement    rxValue := Comm.Rx   '<-- Check if byte but not wait    if (rxValue == commStart)      rxValue := Comm.Rx      case rxValue        commForward:          long[decisionMode] := 1        commReverse:          long[decisionMode] := 2           'Motor move backward        commLeft:          long[decisionMode] := 3              'Turn left        commRight:          long[decisionMode] := 4              'Turn right        commStopAll:          long[decisionMode] := 5             'stop all motorsPUB Start(mainMSVal, decisionMode)  _Ms_001 := mainMSVal         'For Pause  Stop                         'stops & frees cogIDCom to prevent recalling  Pause(800)                   'Buffer  ComcogID := cognew(CaptureData(decisionMode), @commStack) ' Pause(200)  returnPUB Stop  if ComcogID    cogstop(ComcogID~)PRI Pause(ms) | t  t := cnt - 1088  repeat (ms #> 0)    waitcnt(t += _MS_001)  returnDATname    byte  "string_data",0